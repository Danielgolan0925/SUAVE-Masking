import cv2
import numpy as np

def apply_mask(frame):
    # Convert BGR to HSV
    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

    # Define range of color in HSV
    lower_color= np.array([0, 120, 70])
    upper_color = np.array([10, 255, 255])

    # Create a mask. Threshold the HSV image to get only the colors specified
    mask = cv2.inRange(hsv, lower_color, upper_color)

    # Bitwise-AND mask and original image
    result = cv2.bitwise_and(frame, frame, mask=mask)
    return result, mask

def find_and_draw_contours(frame, mask):
    # Find contours in the mask
    contours, _ = cv2.findContours(mask, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)

    # Draw bounding boxes around contours
    for contour in contours:
        # Get the bounding box coordinates
        x, y, w, h = cv2.boundingRect(contour)
        # Draw the bounding box on the frame
        cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)

    return frame

def livestream_from_camera(camera_index=0):
    # Open a connection to the camera
    cap = cv2.VideoCapture(camera_index)

    if not cap.isOpened():
        print("Error: Could not open camera.")
        return

    while True:
        # Capture frame-by-frame
        ret, frame = cap.read()

        if not ret:
            print("Error: Failed to capture image")
            break

        # Apply mask to the frame
        masked_frame, mask = apply_mask(frame)

        # Find and draw contours on the masked frame
        frame_with_contours = find_and_draw_contours(masked_frame, mask)

        # Display the resulting frame and mask
        cv2.imshow('Live Stream with Contours', frame_with_contours)
        cv2.imshow('Mask', mask)

        # Press 'q' to quit the livestream
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    # When everything done, release the capture
    cap.release()
    cv2.destroyAllWindows()

if __name__ == "__main__":
    livestream_from_camera()
